# -*- coding: utf-8 -*-
"""Образец_-_Изучение_функций_с_помощью_MatplotLib (1).ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1KKrXZ6HipBUGml0taK_KfNXCtSlLsmBT

# Изучение функций с помощью MatplotLib
"""

import sys
sys.version_info
import matplotlib.pyplot as plt
import numpy as np

def CreateFig(figsize, name, Create_Axes):
    fig = plt.figure(figsize=(13, 8))
    fig.add_axes()
    axes = Create_Axes(fig, name, [0, 0, 1, 1], figsize)
    return (fig, axes)


def FilterFunc(f, lo, hi):
    f[(f < lo) | (f > hi)] = np.NaN
    return f


def FunctionsIterator(func_list, ax, seq, low, high, fontsize):
    for function in func_list:
        function.plot(ax, low, high, seq)
    ax.legend(fontsize=fontsize)


def CreateAxes(figure, title, coordinates, fontsize):
    ax = figure.add_axes(coordinates)
    ax.set_xlabel('x')
    ax.set_ylabel('y')
    ax.set_title(title, fontsize=fontsize)
    return ax


def CreateSubplots(ax, title, fontsize):
    ax.set_xlabel('x')
    ax.set_ylabel('y')
    ax.set_title(title, fontsize=fontsize)
    return ax


def CreateZeroLine(x, axes):
    axes.plot(x, np.zeros(x.shape), label='$f(x) = 0$', color='k')


class TestedFunc:
    def __init__(self, a, b, colour):
        self.a = a
        self.b = b
        self.colour = colour


    def GetValue(self, v):
        z = (v ** self.b + self.a ** self.b) / v ** self.b
        return z


    def MakeLabel(self):
        return f'$\\alpha = {self.a}, \\beta = {self.b}$'


    def plot(self, ax, lo, hi, x):
        ax.plot(x, FilterFunc(self.GetValue(x), lo, hi), self.colour,
                label=self.MakeLabel())

title = '$\\frac{x^\\beta + \\alpha^\\beta}{x^\\beta}$'

"""Цель задания - исследование функции 
$$\LARGE f(x) = \frac{x^{\beta} + \alpha^{\beta}}{x^{\beta} }$$
при различных значениях $\alpha$ и $\beta$.

Для каждой задачи необходимо:

- Построить график (размер графика должен быть достаточным, чтобы визуально увидеть особенности изучаемых функций), график каждой функции должен быть одного цвета для одного значения $\alpha$ и $\beta$.

- Подписать оси и заголовок

- Создать легенду

- Сохранить изображение в svg файл

- Сделать и записать выводы о поведении графиков (можно использовать наводящие вопросы)
___________

- Код не должен вызывать ошибки исполнения (например, из-за деления на 0 или корня из отрицательной величины)

- Код должен выполняться (падение кода с ошибкой у проверяющего на python аналогичной версии - повод не зачесть все пункты соответствующей задачи)

## Задача №1

### Часть 1

Построить в общих осях графики для:

- $\alpha = 1, \beta = 1$

- $\alpha = 2, \beta = 1$

- $\alpha = 1, \beta = 2$
"""

fig, axes = CreateFig(26, title, CreateAxes)
functions = [TestedFunc(1, 2, 'b'), TestedFunc(2, 1, 'g'),
            TestedFunc(1, 1,'r')]

X = np.arange(-10, 10, 0.01)
FunctionsIterator(functions, axes, X, -3, 6, 12)
axes.set_yticks(np.arange(-3, 6, step=2), minor=True)
axes.set_yticks(np.arange(-3, 6, step=1))

"""### Часть 2

Построить в общих осях графики для $x>0$.

На том же графике сделать 2 врезки, демонстрирующие поведение графиков на 2 интервалах:

- для малых x

- для больших x

Необходимо продемонстрировать возможность (или невозможность) пересечений и стремление функций.

Цвет линий на врезках и основном графике должен быть одинаковым для одних и тех же значений $\alpha$ и $\beta$.
"""

fig, axes = CreateFig(26, title, CreateAxes)
functions = [TestedFunc(1, 2, 'b'), TestedFunc(2, 1, 'g'),
            TestedFunc(1, 1,'r')]

X = np.arange(-10, 10, 0.01)
FunctionsIterator(functions, axes, X, -3, 6, 12)
axes.set_yticks(np.arange(-3, 6, step=2), minor=True)
axes.set_yticks(np.arange(-3, 6, step=1))

X = np.arange(0.02, 1.5, 0.01)
axes = CreateAxes(fig, 'Small values', [0.1, 0.55, 0.3, 0.25], 12)
FunctionsIterator(functions, axes, X, 0, 10, 8)

X = np.arange(10, 15, 0.1)
axes = CreateAxes(fig, 'Big values', [0.65, 0.55, 0.3, 0.25], 12)
FunctionsIterator(functions, axes, X, 0, 10, 8)

plt.show()
fig.show()
fig.savefig('task1.svg')

"""### Часть 3

Построить в общих осях графики для $x<0$.

На том же графике сделать 1 врезку, демонстрирующую поведение графиков при удалении x от 0 к $-\infty$.

Необходимо продемонстрировать возможность (или невозможность) пересечений и стремление функций. Так же нанесите на графики прямую f(x) = 0.

Цвет линий на врезках и основном графике должен быть одинаковым для одних и тех же значений $\alpha$ и $\beta$.
"""

fig, axes = CreateFig(26, title, CreateAxes)
functions = [TestedFunc(1, 2, 'b'), TestedFunc(2, 1, 'g'),
            TestedFunc(1, 1,'r')]

X = np.arange(-10, 10, 0.01)
CreateZeroLine(X, axes)
FunctionsIterator(functions, axes, X, -3, 6, 12)
axes.set_yticks(np.arange(-3, 6, step=2), minor=True)
axes.set_yticks(np.arange(-3, 6, step=1))

X = np.arange(0.02, 1.5, 0.01)
axes = CreateAxes(fig, 'Small values', [0.1, 0.55, 0.3, 0.25], 12)
CreateZeroLine(X, axes)
FunctionsIterator(functions, axes, X, 0, 10, 8)

X = np.arange(10, 15, 0.1)
axes = CreateAxes(fig, 'Big values', [0.65, 0.55, 0.3, 0.25], 12)
CreateZeroLine(X, axes)
FunctionsIterator(functions, axes, X, 0, 10, 8)

X = np.arange(-0.1, -15, -0.1)
axes = CreateAxes(fig, 'Negative values', [0.1, 0.05, 0.3, 0.25], 12)
CreateZeroLine(X, axes)
FunctionsIterator(functions, axes, X, 0, 3, 8)
axes.set_yticks(np.arange(0, 3, step=1), minor=True)
axes.set_yticks(np.arange(0, 3, step=1))

plt.show()
fig.show()
fig.savefig('task1.svg')



"""Сделайте выводы о поведении графиков при различных значениях $\alpha$ и $\beta$.

Изучите возможности пересечения и то к чему стремятся кривые.

Сделайте выводы о возрастании/убывании.

[link text](https://)

## Задача №2

Построить в общих осях графики для:

- $\alpha = 1, \beta = 0$

- $\alpha = 0, \beta = 0$

- $\alpha = 0, \beta = 1$

- $\alpha = 0, \beta = 2$

- $\alpha = 1, \beta = -1$

- $\alpha = 2, \beta = -1$

Сделайте выводы о поведении графиков
"""

fig, axes = CreateFig(26, title, CreateAxes)

functions = ([TestedFunc(1, 0,'r'), TestedFunc(0, 0, 'g'),
            TestedFunc(0, 1, 'b'), TestedFunc(0, 2, 'y'),
            TestedFunc(1, -1, 'c'), TestedFunc(2, 1, 'k')])
low, high = -10, 10
for func in functions:
    func.plot(axes, low, high, np.arange(-10, 10, 0.1))

axes.set_yticks(np.arange(low, high, step=1), minor=True)
axes.set_yticks(np.arange(low, high, step=2))
axes.legend(fontsize=12)
plt.show()
fig.show()
fig.savefig('task2.svg')

"""## Задача №3

Построить в общих осях графики для:

- $\alpha = 1, \beta = 0.5$

- $\alpha = 1, \beta = -0.5$

- $\alpha = 1, \beta = -1.5$

Сделайте выводы о поведении графиков, включая возрастание/убывание и выпуклость/вогнутость
"""

fig, axes = CreateFig(26, title, CreateAxes)
functions = ([TestedFunc(1, 0.5,'r'), TestedFunc(1, -0.5, 'g'),
            TestedFunc(1, -1.5, 'b')])
low, high = 0, 10
for func in functions:
    func.plot(axes, low, high, np.arange(0, 1.3, 0.01))

axes.set_yticks(np.arange(low, high, step=1), minor=True)
axes.set_yticks(np.arange(low, high, step=2))
axes.legend(fontsize=12)

plt.show()
fig.show()
fig.savefig('task3.svg')

"""## Задача №4

В результате выполнения предыдущей задачи, вы вероятно заметите, что все графики с $\alpha=1$ проходят через общую точку (1, 2).

Постройте в одном ряду 3 графика, чтобы убедиться в выводах, сделанных по результатам предыдущей задачи.

Каждый график будет содержать 4 кривые. 2 общих:

- $\alpha = 1, \beta = 0$ (в качестве цвета попробуйте использовать 'b--')

- $\alpha = 1, \beta = -1$ (в качестве цвета попробуйте использовать 'r--')

И 2 уникальных для каждого графика:

1. $\alpha = 1, \beta = 0.5$ и $\alpha = 1, \beta = 0.8$

2. $\alpha = 1, \beta = -0.5$ и $\alpha = 1, \beta = -0.8$

3. $\alpha = 1, \beta = -1.5$ и $\alpha = 1, \beta = -2.5$

Не забудьте добавить легенду на каждый график. Для этого может потребоваться вызвать метод legend() для каждого объекта осей.

Для того чтобы задать общий заголовок для всех 3 графиков используйте метод https://matplotlib.org/api/_as_gen/matplotlib.pyplot.suptitle.html
"""

fig, axes = plt.subplots(1, 3, figsize=(13, 8))
fig.suptitle(title, fontsize=26)
f1 = TestedFunc(1, 0, 'b--')
f2 = TestedFunc(1, -1, 'r--')
graphs = [[f1, f2, TestedFunc(1, 0.5,'g'), TestedFunc(1, 0.8,'y')],
        [f1, f2, TestedFunc(1, -0.5,'g'), TestedFunc(1, -0.8,'y')],
        [f1, f2, TestedFunc(1, 1.5,'g'), TestedFunc(1, 2.5,'y')]]

low, high = -10, 10
X = np.arange(-0.5, 2.5, 0.01)
for i in range(len(graphs)):
    CreateSubplots(axes[i], '', 20)
    FunctionsIterator(graphs[i], axes[i], X, low, high, 8)

fig.show()
fig.savefig('task4.svg')